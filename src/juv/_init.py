from __future__ import annotations\\\nimport tempfile\\\nimport subprocess\\\nimport typing\\\nimport sys\\\nfrom pathlib import Path\\\nimport rich\\\nimport jupytext\\\nfrom ._pep723 import includes_inline_metadata\\\nfrom ._nbconvert import new_notebook, code_cell, write_ipynb\\\n\\\nT = typing.TypeVar('T')\\\n\\\ndef find(cb: typing.Callable[[T], bool], items: list[T]) -> T | None:\\\n    """Find the first item in a list that satisfies a condition."""\\\n    return next((item for item in items if cb(item)), None)\\\n\\\ndef new_notebook_with_inline_metadata(dir: Path, python: str | None = None) -> dict:\\\n    """Create a new notebook with inline metadata.\\n\\n    Parameters\\n    ----------\\n    dir : pathlib.Path\\n        A directory for uv to run `uv init` in. This is used so that we can\\n        defer the selection of Python (if not specified) to uv.\\n    python : str, optional\\n        A version of the Python interpreter. Provided as `--python` to uv if specified.\\n\\n    Returns\\n    -------\\n    dict\\n        A new notebook with a single code cell containing the contents of the\\n        script generated by `uv init`.\\n    """\\\n    with tempfile.NamedTemporaryFile(\\\n        mode='w+',\\n        suffix='.py',\\n        delete=True,\\n        dir=dir\\n    ) as f:\\\n        cmd = ['uv', 'init', '--quiet']\\\n        if python:\\\n            cmd.extend(['--python', python])\\\n        cmd.extend(['--script', f.name])\\\n        subprocess.run(cmd, check=True)\\\n        f.seek(0)\\\n        contents = f.read().strip()\\\n        notebook = new_notebook(cells=[code_cell(contents, hidden=True)])\\\n    return notebook\\\n\\\ndef get_first_non_conflicting_untitled_ipynb(dir: Path) -> Path:\\\n    """Find an untitled .ipynb file in the given directory.\\n\\n    Parameters\\n    ----------\\n    dir : pathlib.Path\\n        The directory to search for an untitled .ipynb file.\\n\\n    Returns\\n    -------\\n    pathlib.Path\\n        The path to the first untitled .ipynb file found in the directory.\\n    """\\\n    if not (dir / 'Untitled.ipynb').exists():\\\n        return dir / 'Untitled.ipynb'\\\n    for i in range(1, 100):\\\n        if not (dir / f'Untitled{i}.ipynb').exists():\\\n            return dir / f'Untitled{i}.ipynb'\\\n    raise ValueError('Could not find an available UntitledX.ipynb')\\\n\\\ndef init(path: Path | None, python: str | None) -> None:\\\n    """Initialize a new notebook.\\n\\n    Parameters\\n    ----------\\n    path : pathlib.Path | None\\n        The path to the notebook file. If None, a new notebook will be created in the current working directory.\\n    python : str | None\\n        The Python version to use for the notebook. If None, the default Python version will be used.\\n    """\\\n    if not path:\\\n        path = get_first_non_conflicting_untitled_ipynb(Path.cwd())\\\n    if not path.suffix == '.ipynb':\\\n        rich.print('File must have a `[cyan].ipynb[/cyan]` extension.', file=sys.stderr)\\\n        sys.exit(1)\\\n    notebook = new_notebook_with_inline_metadata(path.parent, python)\\\n    write_ipynb(notebook, path)\\\n    rich.print(f'Initialized notebook at `[cyan]{path.resolve().absolute()}[/cyan]`')