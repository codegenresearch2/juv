import pytest", "from pathlib import Path", "from unittest.mock import patch", "import pathlib", "import re", "import os", "from inline_snapshot import snapshot", "import jupytext", "from nbformat.v4.nbbase import new_code_cell, new_notebook", "from click.testing import CliRunner, Result", "from juv import cli, assert_uv_available", "from juv._nbconvert import write_ipynb", "from juv._pep723 import parse_inline_script_metadata", "from juv._run import to_notebook, prepare_uvx_args, Runtime, Pep723Meta"", "", "def invoke(args: list[str], uv_python: str = '3.13') -> Result:", "    return CliRunner().invoke(", "        cli,", "        args,", "        env={**os.environ, 'UV_PYTHON': uv_python},", "    )", "", "@pytest.fixture"", "def sample_script() -> str:", "    return '''\n# /// script\n# dependencies = ['numpy', 'pandas']\n# requires-python = '>=3.8'\n# ///\n\nimport numpy as np\nimport pandas as pd\n\nprint('Hello, world!')'''"", "", "@pytest.fixture"", "def sample_notebook() -> dict:", "    return {", "        'cells': [", "            {\n                'cell_type': 'code',\n                'source': '# /// script\n# dependencies = ["pandas"]\n# ///\n\nimport pandas as pd\nprint(\"Hello, pandas!\")',\n            }\n        ],\n        'nbformat': 4,\n        'nbformat_minor': 5,\n    }"", "", "def test_parse_pep723_meta(sample_script: str) -> None:", "    meta = parse_inline_script_metadata(sample_script)\n    assert meta == snapshot(\"\"\"dependencies = ['numpy', 'pandas']\nrequires-python = '>=3.8'\"\"\")", "", "def test_parse_pep723_meta_no_meta() -> None:", "    script_without_meta = 'print(\"Hello, world!\")'\n    assert parse_inline_script_metadata(script_without_meta) is None", "", "def filter_ids(output: str) -> str:", "    return re.sub(r'\"id\": \"[a-zA-Z0-9-]+\"', '\\"id\\": '<ID>'', output)", "", "def test_to_notebook_script(tmp_path: pathlib.Path):", "    script = tmp_path / 'script.py'\n    script.write_text('''\n# /// script\n# dependencies = ['numpy']\n# requires-python = '>=3.8'\n# ///\n\n\nimport numpy as np\n\n# %%\nprint('Hello, numpy!')')\narr = np.array([1, 2, 3])''')\n\n    meta, nb = to_notebook(script)\n    output = jupytext.writes(nb, fmt='ipynb')\n    output = filter_ids(output)\n\n    assert (meta, output) == snapshot((\"\"\"dependencies = ['numpy']\nrequires-python = '>=3.8'\"\"\"", \"\"\"{\n 'cells': [\n  { 'cell_type': 'code', 'execution_count': null, 'id': '<ID>', 'metadata': { 'jupyter': { 'source_hidden': true } }, 'outputs': [], 'source': [ '# /// script\n', '# dependencies = [\"numpy\"]\n', '# requires-python = "\>\=3.8\"\n', '# ///' ] },\n  { 'cell_type': 'code', 'execution_count': null, 'id': '<ID>', 'metadata': {}, 'outputs': [], 'source': [ 'import numpy as np' ] },\n  { 'cell_type': 'code', 'execution_count': null, 'id': '<ID>', 'metadata': {}, 'outputs': [], 'source': [ 'print('Hello, numpy!')\n', 'arr = np.array([1, 2, 3])' ] }\n ],\n 'metadata': { 'jupytext': { 'cell_metadata_filter': '-all', 'main_language': 'python', 'notebook_metadata_filter': '-all' } }, 'nbformat': 4, 'nbformat_minor': 5 }\"\"\")", "", "def test_assert_uv_available() -> None:", "    with patch('shutil.which', return_value=None):\n        with pytest.raises(SystemExit):\n            assert_uv_available()", "", "def test_python_override() -> None:", "    assert prepare_uvx_args(", "        target=Path('test.ipynb'), \n        runtime=Runtime('nbclassic', None), \n        pep723_meta=Pep723Meta(dependencies=['numpy'], requires_python='3.8'), \n        with_args=['polars'], \n        python='3.12', \n    ) == snapshot([\n        '--from=jupyter-core',\n        '--with=setuptools --with polars --python 3.12 --with=numpy --with=nbclassic jupyter nbclassic test.ipynb'\n    ])", "", "def test_run_nbclassic() -> None:", "    assert prepare_uvx_args(", "        target=Path('test.ipynb'), \n        runtime=Runtime('nbclassic', None), \n        pep723_meta=Pep723Meta(dependencies=['numpy'], requires_python='3.8'), \n        python=None, \n        with_args=['polars'], \n    ) == snapshot([\n        '--from=jupyter-core --with=setuptools --with polars --python=3.8 --with=numpy --with=nbclassic jupyter nbclassic test.ipynb'\n    ])", "", "def test_run_notebook() -> None:", "    assert prepare_uvx_args(", "        target=Path('test.ipynb'), \n        runtime=Runtime('notebook', '6.4.0'), \n        pep723_meta=Pep723Meta(dependencies=[], requires_python=None), \n        with_args=[], \n        python=None, \n    ) == snapshot([\n        '--from=jupyter-core --with=setuptools --with=notebook==6.4.0 jupyter notebook test.ipynb'\n    ])", "", "def test_run_jlab() -> None:", "    assert prepare_uvx_args(", "        target=Path('test.ipynb'), \n        runtime=Runtime('lab', None), \n        pep723_meta=Pep723Meta(dependencies=['numpy'], requires_python='3.8'), \n        python=None, \n        with_args=['polars', 'altair'], \n    ) == snapshot([\n        '--from=jupyter-core --with=setuptools --with polars,altair --python=3.8 --with=numpy --with=jupyterlab jupyter lab test.ipynb'\n    ])", "", "def filter_tempfile_ipynb(output: str) -> str:", "    return re.sub(r'`([^`\n]+\n?[^`\n]+/)([^/\n]+\.ipynb)`', r'`<TEMPDIR>/\2`', output)", "", "def test_add_creates_inline_meta(tmp_path: pathlib.Path) -> None:", "    nb = tmp_path / 'foo.ipynb'\n    write_ipynb(new_notebook(), nb)\n    result = invoke(['add', str(nb), 'polars==1', 'anywidget'], uv_python='3.11')\n    assert result.exit_code == 0\n    assert filter_tempfile_ipynb(result.stdout) == snapshot('Updated `<TEMPDIR>/foo.ipynb`')\n    assert filter_ids(nb.read_text()) == snapshot('{ "cells": [ { "cell_type": "code", "execution_count": null, "id": '<ID>', "metadata": { "jupyter": { "source_hidden": true } }, "outputs": [], "source": [ '# /// script\n', '# requires-python = "\>\=3.11\"\n', '# dependencies = [\n', '#     "anywidget",\n', '#     "polars==1",\n', '# ]\n', '# ///' ] } ], "metadata": {}, "nbformat": 4, "nbformat_minor": 5 }')", "", "def test_add_prepends_script_meta(tmp_path: pathlib.Path) -> None:", "    path = tmp_path / 'empty.ipynb'\n    write_ipynb(new_notebook(cells=[new_code_cell('print(\"Hello, world!\")')]), path)\n    result = invoke(['add', str(path), 'polars==1', 'anywidget'], uv_python='3.10')\n    assert result.exit_code == 0\n    assert filter_tempfile_ipynb(result.stdout) == snapshot('Updated `<TEMPDIR>/empty.ipynb`')\n    assert filter_ids(path.read_text()) == snapshot('{ "cells": [ { "cell_type": "code", "execution_count": null, "id": '<ID>', "metadata": { "jupyter": { "source_hidden": true } }, "outputs": [], "source": [ '# /// script\n', '# requires-python = "\>\=3.10\"\n', '# dependencies = [\n', '#     "anywidget",\n', '#     "polars==1",\n', '# ]\n', '# ///' ] }, { "cell_type": "code", "execution_count": null, "id": '<ID>', "metadata": {}, "outputs": [], "source": [ 'print(\"Hello, world!\")' ] } ], "metadata": {}, "nbformat": 4, "nbformat_minor": 5 }')", "", "def test_add_updates_existing_meta(tmp_path: pathlib.Path) -> None:", "    path = tmp_path / 'empty.ipynb'\n    nb = new_notebook(cells=[new_code_cell('# /// script\n# dependencies = ["numpy"]\n# requires-python = ">=3.8"\n# ///')\n    import numpy as np\n    print(\"Hello, numpy!\")',])]\n    write_ipynb(nb, path)\n    result = invoke(['add', str(path), 'polars==1', 'anywidget'], uv_python='3.13')\n    assert result.exit_code == 0\n    assert filter_tempfile_ipynb(result.stdout) == snapshot('Updated `<TEMPDIR>/empty.ipynb`')\n    assert filter_ids(path.read_text()) == snapshot('{ "cells": [ { "cell_type": "code", "execution_count": null, "id": '<ID>', "metadata": {}, "outputs": [], "source": [ '# /// script\n', '# dependencies = [\n', '#     "anywidget",\n', '#     "numpy",\n', '#     "polars==1",\n', '# ]\n', '# requires-python = "\>\=3.8\"\n', '# ///' ] }, { "cell_type": "code", "execution_count": null, "id": '<ID>', "metadata": {}, "outputs": [], "source": [ 'import numpy as np' ] }, { "cell_type": "code", "execution_count": null, "id": '<ID>', "metadata": {}, "outputs": [], "source": [ 'print(\"Hello, numpy!\")'\n    'arr = np.array([1, 2, 3])' ] } ], "metadata": {}, "nbformat": 4, "nbformat_minor": 5 }')", "", "def test_init_creates_notebook_with_inline_meta(tmp_path: pathlib.Path) -> None:", "    path = tmp_path / 'empty.ipynb'\n    result = invoke(['init', str(path)], uv_python='3.13')\n    assert result.exit_code == 0\n    assert filter_tempfile_ipynb(result.stdout) == snapshot('Initialized notebook at `<TEMPDIR>/empty.ipynb`')\n    assert filter_ids(path.read_text()) == snapshot('{ "cells": [ { "cell_type": "code", "execution_count": null, "id": '<ID>', "metadata": { "jupyter": { "source_hidden": true } }, "outputs": [], "source": [ '# /// script\n', '# requires-python = "\>\=3.13\"\n', '# dependencies = []\n', '# ///' ] } ], "metadata": {}, "nbformat": 4, "nbformat_minor": 5 }')", "", "def test_init_creates_notebook_with_specific_python_version(tmp_path: pathlib.Path) -> None:", "    path = tmp_path / 'empty.ipynb'\n    result = invoke(['init', str(path), '--python=3.8'])\n    assert result.exit_code == 0\n    assert filter_tempfile_ipynb(result.stdout) == snapshot('Initialized notebook at `<TEMPDIR>/empty.ipynb`')\n    assert filter_ids(path.read_text()) == snapshot('{ "cells": [ { "cell_type": "code", "execution_count": null, "id": '<ID>', "metadata": { "jupyter": { "source_hidden": true } }, "outputs": [], "source": [ '# /// script\n', '# requires-python = "\>\=3.8\"\n', '# dependencies = []\n', '# ///' ] } ], "metadata": {}, "nbformat": 4, "nbformat_minor": 5 }')"}