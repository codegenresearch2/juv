import pytest", "from pathlib import Path", "from unittest.mock import patch", "import pathlib", "import re", "import os", "from inline_snapshot import snapshot", "import jupytext", "from nbformat.v4.nbbase import new_code_cell, new_notebook", "from click.testing import CliRunner, Result", "from juv import cli, assert_uv_available", "from juv._nbconvert import write_ipynb", "from juv._pep723 import parse_inline_script_metadata", "from juv._run import to_notebook, prepare_uvx_args, Runtime, Pep723Meta", "", "def invoke(args: list[str], uv_python: str = '3.13') -> Result:", "    return CliRunner().invoke(", "        cli,", "        args,", "        env={**os.environ, 'UV_PYTHON': uv_python},", "    )", "", "@pytest.fixture", "def sample_script() -> str:", "    return '\n# /// script\n# dependencies = ['numpy', 'pandas']\n# requires-python = '>=3.8'\n# ///\n\nimport numpy as np\nimport pandas as pd\n\nprint('Hello, world!')'", "", "@pytest.fixture", "def sample_notebook() -> dict:", "    return {'cells': [\n            {'cell_type': 'code', \n            'source': '\n# /// script\n# dependencies = ["pandas"]\n# ///\n\nimport pandas as pd\nprint(\"Hello, pandas!\")'"], \n            'nbformat': 4, 'nbformat_minor': 5}""